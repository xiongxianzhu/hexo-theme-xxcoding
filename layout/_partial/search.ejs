<div>
    <!-- 模态框结构 -->
    <div id="search-modal" class="modal">
        <div class="modal-content">
            <div id="search-title">
                <i class="material-icons icon-search">search</i>
                &nbsp;搜索
            </div>
            <input type="text" id="search-input" placeholder="输入关键字进行搜索...">
            <ul id="search-results"></ul>
        </div>
    </div>

    <script>
        // $(document).ready(function() {
        //     // 获取搜索输入框和结果列表元素
        //     var searchInput = $('#search-input');
        //     var searchResults = $('#search-results');

        //     // 读取 search.json 文件
        //     $.getJSON('<%= url_for("/search.json") %>', function(data) {
        //         // 监听输入框的输入事件
        //         searchInput.on('input', function() {
        //             var query = $(this).val().toLowerCase();

        //             if (query === '') {
        //                 // 如果查询字符串为空，则清空结果列表
        //                 searchResults.empty();
        //                 return;
        //             }

        //             var results = data.filter(post => 
        //                 post.title.toLowerCase().includes(query) || 
        //                 post.content.toLowerCase().includes(query)
        //             );

        //             // 清空结果列表
        //             searchResults.empty();

        //             // 显示搜索结果
        //             results.forEach(function(result) {
        //                 var li = $('<li>');
        //                 var a = $('<a>').attr('href', result.url).text(result.title).addClass('title');
        //                 li.append(a);
        //                 searchResults.append(li);

        //                 // 高亮显示关键词
        //                 var content = result.content.trim().replace(/<[^>]+>/g, "");
        //                 var regex = new RegExp('(' + query.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + ')', 'gi');
        //                 var highlightedContent = content.replace(regex, '<span class="highlight">$&</span>');
        //                 li.append($('<div>').html(highlightedContent).addClass('content'));

        //             });
                    
        //         });
        //     }).fail(function(err) {
        //         console.error(err);
        //     });
        // });

        $(document).ready(function() {
            // 获取搜索输入框和结果列表元素
            var searchInput = $('#search-input');
            var searchResults = $('#search-results');

            // 读取 search.json 文件
            $.getJSON('<%= url_for("/search.json") %>', function(data) {
                // 监听输入框的输入事件
                searchInput.on('input', function() {
                    var query = $(this).val().toLowerCase().trim();

                    if (query === '') {
                        // 如果查询字符串为空，则清空结果列表
                        searchResults.empty();
                        return;
                    }
                    
                    // 将查询字符串拆分成多个关键词，并过滤掉空字符串
                    var keywords = query.split(/\s+/).filter(keyword => keyword.trim() !== '');

                    var results = data.filter(post => 
                        keywords.some(keyword => 
                            post.title.toLowerCase().includes(keyword) || 
                            post.content.toLowerCase().includes(keyword)
                        )
                    );

                    // 清空结果列表
                    searchResults.empty();

                    // 显示搜索结果
                    results.forEach(function(result) {
                        var li = $('<li>');
                        var title = highlightMatches(result.title, keywords, result.title.length, result.title);
                        // var a = $('<a>').attr('href', result.url).text(title).addClass('title');
                        var a = $('<a>').attr('href', result.url).html(title).addClass('title');
                        li.append(a);
                        searchResults.append(li);

                        // 高亮显示关键词及其前后 20 个字符
                        // var content = result.content.trim().replace(/<[^>]+>/g, "");
                        var content = result.content.trim();
                        content = stripMarkdownAndHtml(content);
                        var highlightedContent = highlightMatches(content, keywords, 20);
                        li.append($('<div>').html(highlightedContent).addClass('content'));

                    });
                    
                });
            }).fail(function(err) {
                console.error(err);
            });
        });

        /**
         * 从给定字符串中移除Markdown和HTML语法的函数。
         * @param {string} input - 包含Markdown和HTML语法的字符串。
         * @return {string} - 去除Markdown和HTML语法的纯文本。
         */
        function stripMarkdownAndHtml(input) {
            return input
                .replace(/(\*\*|__)(.*?)\1/g, '$2')  // 加粗: **text** 或 __text__
                .replace(/(\*|_)(.*?)\1/g, '$2')     // 斜体: *text* 或 _text_
                .replace(/(~~)(.*?)\1/g, '$2')       // 删除线: ~~text~~
                .replace(/`([^`]+)`/g, '$1')         // 行内代码: `text`
                .replace(/```[\s\S]*?```/g, '')      // 代码块: ```text```
                .replace(/<[^>]*>/g, '')             // HTML标签
                .replace(/#+\s+(.*)/g, '$1')         // 标题: # text
                .replace(/!\[.*?\]\(.*?\)/g, '')     // 图片: ![alt](url)
                .replace(/\[(.*?)\]\(.*?\)/g, '$1')  // 链接: [text](url)
                .replace(/^\s*\n/gm, '');            // 去除空行
        }

        /**
         * 高亮显示关键词
         * @param {string} text - 字符串。
         * @param {string} keywords - 关键词数组。
         * @param {int} offset - 偏移量。
         * @param {string} notMatchValue - 不匹配时默认值。
         * @return {string} 高亮后的文本 - 。
         */
        function highlightMatches(text, keywords, offset = 0, notMatchValue = '') {
            // 创建正则表达式以匹配关键词，并确保关键词不会被部分匹配
            const regex = new RegExp(keywords.map(keyword => `(${keyword.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')})`).join('|'), 'gi');

            // 通过正则表达式匹配所有关键词
            const matches = [];
            let match;
            while ((match = regex.exec(text)) !== null) {
                matches.push({
                    index: match.index,
                    length: match[0].length,
                    keyword: match[0]
                });
            }

            if (matches.length === 0) {
                return notMatchValue;
            }

            // 按照匹配的 index 升序排序
            matches.sort((a, b) => a.index - b.index);

            // console.log(matches);

            // 按照匹配顺序重建文本，并添加高亮标记
            let highlightedText = '';
            let lastIndex = 0;
            
            matches.forEach(({ index, length, keyword }) => {
                // 获取关键词前后2个字符的位置
                let start = Math.max(0, index - offset);
                let end = index + length + offset;

                if (index < lastIndex || lastIndex > start) {
                    // 处理重复的部分
                    start = lastIndex;
                } else if (lastIndex !== start && lastIndex > 0) {
                    // 处理非重复的部分 
                    highlightedText += '...'
                }

                // console.log([lastIndex, start, end]);
                // console.log(text.slice(start, end));

                highlightedText += text.slice(start, end);  // 包含关键词前后的字符
                highlightedText = highlightLastOccurrence(highlightedText, keyword);  // 高亮最后一个关键词
                // console.log(highlightedText);

                lastIndex = end;  // 更新最后处理的位置
            });

            return highlightedText;
        }

        function highlightLastOccurrence(text, keyword) {
            // 高亮最后一个关键词
            // 查找最后一个 keyword 的位置
            const lastIndex = text.lastIndexOf(keyword);
            if (lastIndex === -1) return text; // 如果找不到 keyword，则返回原始文本

            // 构造高亮的 HTML 代码
            const highlightedKeyword = `<span class="highlight">${keyword}</span>`;

            // 通过模板字符串拼接高亮后的文本
            return `${text.substring(0, lastIndex)}${highlightedKeyword}${text.substring(lastIndex + keyword.length)}`;
        }

        // // 示例
        // const text = '显示可安装的python版本的``bash\npyenv install --listpython';
        // const keywords = ['python', '安装'];
        // const result = highlightMatches(text, keywords, 16);
        // console.log(result); // 输出：显示可<span class="highlight">安装</span>的<span class="highlight">python</span>版本

        // 处理按钮点击事件
        $('.modal-trigger').on('click', function(e) {
            e.preventDefault(); // 阻止默认行为
            var modalId = $(this).attr('href');
            var modal = $(modalId);
            M.Modal.init(modal[0]);
            var instance = M.Modal.getInstance(modal[0]);
            instance.open();
        });
    </script>
</div>
